"""
Configuration file for the Telegram Bot
"""
import os
import json
from dotenv import load_dotenv

load_dotenv()

class BotConfig:
    """Bot configuration settings"""
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    PHOTO_URL = os.getenv('PHOTO_URL', "https://www.cio.com/wp-content/uploads/2023/05/SW-Blog-image-Getty-1170x600-2.jpg?quality=50&strip=all")
    WEBAPP_URL = os.getenv('WEBAPP_URL', "https://invest-app-neon.vercel.app")
    CONTACT_URL = os.getenv('CONTACT_URL', "https://t.me/KapitalPro_Support")
    
    # Admin configuration
    ADMIN_ID = os.getenv('ADMIN_ID')
    
    # Firebase configuration
    FIREBASE_SERVICE_ACCOUNT = os.getenv('FIREBASE_SERVICE_ACCOUNT')
    FIREBASE_PROJECT_ID = os.getenv('FIREBASE_PROJECT_ID')
    
    # Logging configuration
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # Language configurations
    LANGUAGES = {
        'english': {
            'name': 'üá¨üáß English',
            'welcome': 'Dear user: @{username}!\nWelcome to KapitalPro.\nKapitalPro integrates the power of artificial intelligence and machine learning into every stage of our value chain. AI technology is the core of our strategic growth engine and processes. Invest in cryptocurrencies using AI strategies and achieve stable returns.\n\nChoose your preferred language:',
            'callback': 'Language changed to English',
            'error': 'Error. Please try again!',
            'start_prompt': 'Please use /start to begin.'
        },
        'azerbaijani': {
            'name': 'üá¶üáø Azerbaijani',
            'welcome': 'H√∂rm…ôtli istifad…ô√ßi: @{username}!\nKapitalPro-ya xo≈ü g…ôlmisiniz.\nKapitalPro s√ºni intellekt v…ô ma≈üƒ±n √∂yr…ônm…ôsinin g√ºc√ºn√º d…ôy…ôr z…ôncirimizin h…ôr m…ôrh…ôl…ôsin…ô inteqrasiya edir. AI texnologiyasƒ± strategiyamƒ±zƒ±n b√∂y√ºm…ô m√ºh…ôrriki v…ô prosesl…ôrinin …ôsasƒ±nƒ± t…ô≈ükil edir. AI strategiyalarƒ±ndan istifad…ô ed…ôr…ôk kriptovalyutalara investisiya edin v…ô sabit g…ôlir …ôld…ô edin.\n\nDil se√ßin:',
            'callback': 'Dil Az…ôrbaycan dilin…ô d…ôyi≈üdirildi',
            'error': 'X…ôta. Z…ôhm…ôt olmasa yenid…ôn c…ôhd edin!',
            'start_prompt': 'Z…ôhm…ôt olmasa ba≈ülamaq √º√ß√ºn /start istifad…ô edin.'
        },
        'russian': {
            'name': 'üá∑üá∫ Russian',
            'welcome': '–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KapitalPro.\nKapitalPro –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –º–æ—â—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –Ω–∞—à–µ–π —Ü–µ–ø–æ—á–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ò–ò —è–≤–ª—è–µ—Ç—Å—è —è–¥—Ä–æ–º –Ω–∞—à–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ò–ò, –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
            'callback': '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
            'error': '–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!',
            'start_prompt': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.'
        }
    }
    
    # Button configurations
    BUTTONS = {
        'launch_app': 'üöÄ Launch App',
        'contact': 'üí¨ Technical Support'
    }
    
    @classmethod
    def validate(cls):
        """Validate required configuration"""
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN is required in environment variables")
        if not cls.ADMIN_ID:
            raise ValueError("ADMIN_ID is required in environment variables")
        if not cls.FIREBASE_SERVICE_ACCOUNT:
            raise ValueError("FIREBASE_SERVICE_ACCOUNT is required in environment variables")
        if not cls.FIREBASE_PROJECT_ID:
            raise ValueError("FIREBASE_PROJECT_ID is required in environment variables")
        return True
    
    @classmethod
    def get_firebase_credentials(cls):
        """Get Firebase credentials from environment variable"""
        try:
            return json.loads(cls.FIREBASE_SERVICE_ACCOUNT)
        except (json.JSONDecodeError, TypeError) as e:
            raise ValueError(f"Invalid FIREBASE_SERVICE_ACCOUNT JSON: {e}")
    
    @classmethod
    def is_admin(cls, user_id):
        """Check if a user ID matches the admin ID"""
        return str(user_id) == str(cls.ADMIN_ID) 